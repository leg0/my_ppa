Package: mqtt-display
Version: 0.1.0
Architecture: armhf
Maintainer: leg0
Installed-Size: 280
Depends: openssl (>= 1.1.1k-1)
Filename: ./mqtt-display_0.1.0.1_armhf.deb
Size: 89892
MD5sum: 7b51b3b50228479f862cbc6679236670
SHA1: df4aff7a4da84a26e6acd775f7e286da505e0dad
SHA256: b7c35b4fbdaf47e3248786954d5d3887ff009c0551be3ea2535c3f938b888a63
Section: devel
Priority: optional
Description: Display data from MQTT on a LED matrix display

Package: mqtt-to-sqlite
Version: 0.1.2
Architecture: armhf
Maintainer: Ahti Legonkov
Installed-Size: 3708
Depends: libc6:armhf (>= 2.31)
Filename: ./mqtt-to-sqlite_0.1.2_armhf.deb
Size: 1824376
MD5sum: 176501ccc2168e7ee0c9e6d919a7aa15
SHA1: a5f7f17c14342a8b1ba7229631e72a206f64a77b
SHA256: 5fd22a3a1ebce102355064414f508268e85aaef972b8cf08595de42ee9adbc21
Priority: optional
Description: Subscribes to MQTT topics and stores the data in time-series database.
 # mqtt-to-sqlite
 .
 Simple utility that subscribes to MQTT topics, and stores values in SQLite3
 database along with timestamps. This is to enable the use of
 the data as data source for Grafana for example.
 .
 The utility is configured with a toml file that looks like this:
 ```toml
 uri = "ssl://mosquitto.lan:8883"
 .
 ca_cert =  "root_ca.crt"
 # The client cert issued by the CA that the ca_cert belongs to.
 client_cert = "client.crt"
 client_key = "client.key"
 .
 # Path to the sqlite3 database file
 db = "m2s.db"
 .
 # For now, it is expected that the payload os a message
 # is in JSON format.
 .
 # When a message for topic a/c/b is received, a jq program given in json_path
 # is run, and the result is written to the table 'metric_name'.
 [metrics.metric_name]
 mqtt_topic = "a/c/b"
 json_path = ".q.w.e"
 .
 # This goes to metadata table
 unit = "C"
 .
 # This goes to table 'another_metric'.
 [metrics.another_metric]
 mqtt_topic = "c/d/e"
 json_path = ".z.x.c"
 unit = "m"
 ```
 .
 ## Create .deb package
 .
 ```
 cargo deb --target armv7-unknown-linux-gnueabihf
 cargo deb
 ```

Package: mqtt-to-sqlite
Version: 0.1.2
Architecture: amd64
Maintainer: Ahti Legonkov
Installed-Size: 5777
Depends: libc6 (>= 2.29)
Filename: ./mqtt-to-sqlite_0.1.2_amd64.deb
Size: 2156432
MD5sum: 7f6e00ea43b776a6dc8f5f7f7fcd201f
SHA1: d29c8515280410814dbec4518261778007f0a944
SHA256: 4e1216d98f5f175c6b1d80a3ebf9f3fbe8e23c145aea1f04bbbef22a0c8f992e
Priority: optional
Description: Subscribes to MQTT topics and stores the data in time-series database.
 # mqtt-to-sqlite
 .
 Simple utility that subscribes to MQTT topics, and stores values in SQLite3
 database along with timestamps. This is to enable the use of
 the data as data source for Grafana for example.
 .
 The utility is configured with a toml file that looks like this:
 ```toml
 uri = "ssl://mosquitto.lan:8883"
 .
 ca_cert =  "root_ca.crt"
 # The client cert issued by the CA that the ca_cert belongs to.
 client_cert = "client.crt"
 client_key = "client.key"
 .
 # Path to the sqlite3 database file
 db = "m2s.db"
 .
 # For now, it is expected that the payload os a message
 # is in JSON format.
 .
 # When a message for topic a/c/b is received, a jq program given in json_path
 # is run, and the result is written to the table 'metric_name'.
 [metrics.metric_name]
 mqtt_topic = "a/c/b"
 json_path = ".q.w.e"
 .
 # This goes to metadata table
 unit = "C"
 .
 # This goes to table 'another_metric'.
 [metrics.another_metric]
 mqtt_topic = "c/d/e"
 json_path = ".z.x.c"
 unit = "m"
 ```
 .
 ## Create .deb package
 .
 ```
 cargo deb --target armv7-unknown-linux-gnueabihf
 cargo deb
 ```

Package: renew-client-cert
Version: 0.1
Architecture: all
Maintainer: me
Filename: ./renew-client-cert_0.1_all.deb
Size: 1556
MD5sum: 01c5f20ff8f4c574da9ba42e08c2a569
SHA1: 7d59cd8a6a7f0b2fdbbb29f10f82ca02707e4193
SHA256: 65371fbc69435f6d1fb7a5ee44e92bedc0707757aee67e901964e1197f1364b9
Description: Periodically renew client certificate.

Package: step-cli
Version: 0.18.0
Architecture: amd64
Maintainer: Smallstep Labs, Inc. <techadmin@smallstep.com>
Installed-Size: 24807
Filename: ./step-cli_0.18.0_amd64.deb
Size: 6424536
MD5sum: 4ab99a4ec6b45432e36b5318b475554e
SHA1: d03259213f0ae24735ae445b08d88b97170ba43a
SHA256: a97d1fcc3d0fab59532005781e1d88dfe0837f94e80da851b6bdd9b196b84552
Section: utils
Priority: optional
Homepage: https://github.com/smallstep/cli
Description: Zero trust swiss army knife
   step is a zero trust swiss army knife. It’s an easy-to-use and hard-to-misuse
   utility for building, operating, and automating systems that use zero trust
   technologies like authenticated encryption (X.509, TLS), single sign-on
   (OAuth OIDC, SAML), multi-factor authentication (OATH OTP, FIDO U2F),
   encryption mechanisms (JSON Web Encryption, NaCl), and verifiable claims
   (JWT, SAML assertions)

Package: step-cli
Version: 0.19.0
Architecture: armhf
Maintainer: Smallstep Labs, Inc. <techadmin@smallstep.com>
Installed-Size: 28039
Filename: ./step-cli_0.19.0_armhf.deb
Size: 6741480
MD5sum: a2fafa8f2e5a5fb09a5a112a740a7038
SHA1: e4b03cf83279a47dde0f6eca7ef940f5018b4643
SHA256: f328d61bc7ca8ee7a3188444c1b46f208f00e6dcda8f2806107eba4d600f4c56
Section: utils
Priority: optional
Homepage: https://github.com/smallstep/cli
Description: Zero trust swiss army knife
   step is a zero trust swiss army knife. It’s an easy-to-use and hard-to-misuse
   utility for building, operating, and automating systems that use zero trust
   technologies like authenticated encryption (X.509, TLS), single sign-on
   (OAuth OIDC, SAML), multi-factor authentication (OATH OTP, FIDO U2F),
   encryption mechanisms (JSON Web Encryption, NaCl), and verifiable claims
   (JWT, SAML assertions)

Package: step-cli
Version: 0.19.0
Architecture: amd64
Maintainer: Smallstep <techadmin@smallstep.com>
Installed-Size: 29930
Filename: ./step-cli_0.19.0_amd64.deb
Size: 11093038
MD5sum: 08a40d939f455970c47a653ef38a6cb0
SHA1: 1b1b7ed61d01c8cdc8d105ab062ab7107f7c5b39
SHA256: d0e92bce56113def910973fdee7d666694ec059d2bac0797f61149816bbce19e
Section: utils
Priority: optional
Homepage: https://github.com/smallstep/cli
Description: step-cli lets you build, operate, and automate Public Key Infrastructure (PKI) systems and workflows.
 It's a swiss army knife for authenticated encryption (X.509, TLS), single sign-on (OAuth OIDC, SAML), multi-factor authentication (OATH OTP, FIDO U2F), encryption mechanisms (JSON Web Encryption, NaCl), and verifiable claims (JWT, SAML assertions).

